<h1><%= @video.title %> </h1>
<div class="row">
  <div class="col-md-12 col-lg-8">
    <div class="card card-body">
      <div class="d-flex justify-content-between align-items-center">
        <%= form_tag  do %>
          <div id="player"></div>
        <% end %>
      </div>
    </div>
  </div>
  <div class="col-md-12 col-lg-4">
    <div class="card card-body" style="overflow: auto;max-height: 550px;">
      <h5 class="m-b-0">The Transcript</h5>
        <% if @video.captions.length === 0 %>
          return "Sorry! Transcript not available yet"
      <% else %>
        <% @video.captions.each do |caption| %>
            <%= content_tag("a"," #{caption["text"]}", data: { seconds: caption["seconds"]}, class: "timecode") %>
        <% end %>
      <% end %>
    </div>
  </div>
  <script>
    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement('script');
    
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName('script')[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
    
    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    function onYouTubeIframeAPIReady() {
      player = new YT.Player('player', {
        height: '490',
        width: '800',
        videoId: '<%=@video.video_source %>',
        enablejsapi: 1,
        modestbranding: 1,
        rel: 0,
        events: {
          'onReady': onPlayerReady,
          'onStateChange': onPlayerStateChange
        }
      });
            var all_subtitles = document.getElementsByClassName("timecode");
            Array.prototype.forEach.call(all_subtitles, function(element) {
              element.addEventListener('click', function() {
                console.log('timecode is: ' + element.dataset.seconds);
               player.seekTo(element.dataset.seconds, true);
 });
            });    
    }
    
    
    
    // User clicks the individual line
    // Link sends the time of the line in seconds
    // Function seeks to the point in the video in seconds.
    
    
     // 4. The API will call this function when the video player is ready.
        function onPlayerReady(event) {
          // event.target.playVideo();
    
        }
    
     // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.
        var done = false;
        function onPlayerStateChange(event) {
    
        }
  </script>
