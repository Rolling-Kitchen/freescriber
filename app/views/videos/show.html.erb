<div class="container">
  <div class="video-show-container">
    <div class="row no-gutters">
      <div class="col-lg-6">
        <div class="show-container">
          <%= render 'videos/video-player' %>
        </div>
      </div>   
      <div class="col-lg-6">
        <div class="show-container">
          <%= render 'videos/video-caption-card' %>
        </div>  
      </div>
    </div>
  </div>
</div>  





<script>

    // 2. This code loads the IFrame Player API code asynchronously.
    var tag = document.createElement("script");
    tag.src = "https://www.youtube.com/iframe_api";
    var firstScriptTag = document.getElementsByTagName("script")[0];
    firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

    // 3. This function creates an <iframe> (and YouTube player)
    //    after the API code downloads.
    var player;
    const all_captions = document.getElementsByClassName("timecode");
    const caption_container = document.getElementById('caption_container');

    function onYouTubeIframeAPIReady() {
      player = new YT.Player("player", {
        height: "490",
        width: "800",
        videoId: "<%=@video.video_source %>",
        enablejsapi: 1,
        modestbranding: 1,
        rel: 0,
        events: {
          onReady: onPlayerReady,
          onStateChange: onPlayerStateChange,
          onError: onPlayerError
        },
      });
      Array.prototype.forEach.call(all_captions, function (element) {
        element.addEventListener("click", function () {
          console.log("timecode is: " + element.dataset.startSeconds);
          player.seekTo(element.dataset.startSeconds, true);
        });
      });
    }
  function onPlayerError(event) {
    window.location.reload(true);
  }
    // 4. The API will call this function when the video player is ready.
    function onPlayerReady(event) {
      // event.target.playVideo();
    }

    // https://stackoverflow.com/questions/37904499/sync-embedded-youtube-video-time-stamp-to-custom-progress-bar
    function get_subtitle(current_time) {
      for (let index = 0; index < all_captions.length; index++) {
        if (all_captions[index].dataset.startSeconds >= current_time - 2) {
          console.log(all_captions[index]);
          return all_captions[index];
        }
      }
    }

    function subtitle_sync() {
      var current_time = player.getCurrentTime();
      let current_caption = get_subtitle(current_time);
      if (current_caption.classList.contains("current_caption")) {} else {
        Array.prototype.forEach.call(all_captions, function (element) {
          element.classList.remove("current_caption");
        });
        current_caption.className += " current_caption";
        // The current caption will be shown 120 px from the top of the caption_container
        caption_container.scrollTop = current_caption.offsetTop - caption_container.offsetTop - 120;
      }
      timeout_setter = setTimeout(subtitle_sync, 1000);
    }

    function onPlayerStateChange(event) {
      switch (event.data) {
        case 0:
          console.log("video ended");
          Array.prototype.forEach.call(all_captions, function (element) {
            element.classList.remove("current_caption");
          });

          break;
        case 1:
          subtitle_sync();
          break;
        case 2:
          console.log("video paused at " + player.getCurrentTime());
      }
    }
</script>

<script>
  const textSearch = document.querySelector(".form-text")
  textSearch.addEventListener("ajax:success", (event, data)=>{
    console.log(event, data)
    console.log("asd")
    const jsonResponse = event.detail[0]
    console.log(jsonResponse)
    const replaceCaption = document.getElementById("caption-text")
    if (jsonResponse.length !== 0) {
      replaceCaption.innerHTML = ""
      jsonResponse.forEach((caption)=>{
        console.log(caption, "hello")
        replaceCaption.insertAdjacentHTML("beforeend", `<a data-start-seconds=${caption.start_seconds} data-end-seconds=${caption.end_seconds} class=timecode>${caption.text}</a><br>`)
      })
      
    }
        Array.prototype.forEach.call(all_captions, function (element) {
        element.addEventListener("click", function () {
          console.log("timecode is: " + element.dataset.startSeconds);
          player.seekTo(element.dataset.startSeconds, true);
        });
      });

  })
  console.log(textSearch)


</script>


<style>

.current_caption{
  background-color:yellow;
  color:black;
}


</style>


